spring:
  application:
    name: ${APPLICATION_NAME:api-gateway}

  config:
    import: optional:configserver:${CONFIG_SERVER_URL:http://localhost:8888}

  cloud:
    gateway:
      routes:
        # Auth service - NO JWT verification (forwarded directly to auth service)
        - id: auth-service
          uri: ${AUTH_SERVICE_URL:http://host.docker.internal:8081}
          predicates:
            - Path=/api/auth/**

        # Health endpoints - NO JWT verification
        - id: health-endpoints
          uri: ${HEALTH_SERVICE_URL:http://host.docker.internal:8080}
          predicates:
            - Path=/actuator/health,/actuator/info

        # Protected API routes - JWT verification REQUIRED
        - id: user-service
          uri: ${USER_SERVICE_URL:http://host.docker.internal:8082}
          predicates:
            - Path=/api/users/**
          filters:
            - name: JwtAuthenticationFilter

        - id: project-service
          uri: ${PROJECT_SERVICE_URL:http://localhost:8083}
          predicates:
            - Path=/api/projects/**
          filters:
            - name: JwtAuthenticationFilter

        - id: task-service
          uri: ${TASK_SERVICE_URL:http://localhost:8084}
          predicates:
            - Path=/api/tasks/**
          filters:
            - name: JwtAuthenticationFilter

        - id: notification-service
          uri: ${NOTIFICATION_SERVICE_URL:http://localhost:8085}
          predicates:
            - Path=/api/notifications/**
          filters:
            - name: JwtAuthenticationFilter

      # Global CORS configuration
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOriginPatterns: ${CORS_ALLOWED_ORIGINS:*}
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
            allowedHeaders: "*"
            allowCredentials: true
            maxAge: ${CORS_MAX_AGE:3600}

# Server configuration
server:
  port: ${SERVER_PORT:8080}

# RSA JWT Configuration (for validating tokens from auth service)
rsa:
  public:
    key: ${RSA_PUBLIC_KEY}

# Legacy JWT config (kept for compatibility)
jwt:
  secret: ${JWT_SECRET:myVerySecureJwtSecretKeyThatIsAtLeast32CharactersLongForHS256Algorithm}
  expiration: ${JWT_EXPIRATION:86400000}

# Logging configuration
logging:
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    com.midlane.project_management_tool_api_gateway: ${LOG_LEVEL_GATEWAY:DEBUG}
    org.springframework.cloud.gateway: ${LOG_LEVEL_GATEWAY:DEBUG}
    org.springframework.security: ${LOG_LEVEL_SECURITY:DEBUG}

# Management endpoints
management:
  endpoints:
    web:
      exposure:
        include: ${MANAGEMENT_ENDPOINTS_INCLUDE:health,info}
  endpoint:
    health:
      show-details: ${MANAGEMENT_HEALTH_SHOW_DETAILS:always}
